# Generated by Django 4.2 on 2023-08-21 11:09

from django.db import migrations, models
import django.db.models.deletion
import django.db.models.functions.text
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('bio_tables', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Action',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_time', models.DateTimeField(verbose_name='Date/Time')),
                ('latitude', models.FloatField(verbose_name='Latitude')),
                ('longitude', models.FloatField(verbose_name='Longitude')),
                ('file', models.CharField(blank=True, max_length=100, null=True, verbose_name='File Name')),
                ('mid', models.IntegerField(blank=True, null=True, verbose_name='$@MID@$')),
                ('type', models.IntegerField(choices=[(1, 'Deployed'), (2, 'Bottom'), (3, 'Recovered'), (4, 'Aborted'), (5, 'Attempted Comms'), (6, 'Release'), (7, 'On Deck'), (8, 'In Water'), (9, 'Start Deployment'), (10, 'On Bottom'), (11, 'Started'), (999, 'Other')], verbose_name='Action Type')),
                ('action_type_other', models.CharField(blank=True, help_text="if the action is an unknown type then leave a comment here identifying what the 'other' type is", max_length=50, null=True, verbose_name='Action Other')),
                ('data_collector', models.CharField(blank=True, max_length=100, null=True, verbose_name='Data Collector')),
                ('sounding', models.FloatField(blank=True, null=True, verbose_name='Sounding')),
                ('comment', models.CharField(blank=True, max_length=255, null=True, verbose_name='Comment')),
            ],
            options={
                'ordering': ('date_time',),
            },
        ),
        migrations.CreateModel(
            name='Bottle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_time', models.DateTimeField(verbose_name='Fired Date/Time')),
                ('bottle_id', models.IntegerField(verbose_name='Bottle ID')),
                ('bottle_number', models.IntegerField(blank=True, null=True, verbose_name='Bottle Number')),
                ('pressure', models.FloatField(default=0.0, verbose_name='Pressure')),
                ('latitude', models.FloatField(blank=True, null=True, verbose_name='Latitude')),
                ('longitude', models.FloatField(blank=True, null=True, verbose_name='Longitude')),
            ],
            options={
                'ordering': ['bottle_id'],
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_id', models.IntegerField(verbose_name='Event ID')),
                ('sample_id', models.IntegerField(blank=True, null=True, verbose_name='Start Bottle')),
                ('end_sample_id', models.IntegerField(blank=True, null=True, verbose_name='End Bottle')),
            ],
            options={
                'ordering': ('event_id',),
            },
        ),
        migrations.CreateModel(
            name='FileConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_type', models.CharField(max_length=18, verbose_name='File Type')),
            ],
        ),
        migrations.CreateModel(
            name='GeographicRegion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Field Name')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Instrument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Instrument')),
                ('type', models.IntegerField(choices=[(1, 'CTD'), (2, 'Net'), (3, 'Mooring'), (4, 'Buoy'), (5, 'VPR'), (999, 'Other')], default=999, verbose_name='Instrument Type')),
            ],
            options={
                'ordering': ('type', 'name'),
            },
        ),
        migrations.CreateModel(
            name='Mission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Originator’s mission number and/or common name(s) for the mission', max_length=50, verbose_name='Mission Name')),
                ('mission_descriptor', models.CharField(blank=True, help_text='Code assigned by OSD, ensures national coordination', max_length=50, null=True, verbose_name='Mission Descriptor')),
                ('start_date', models.DateField(default=django.utils.timezone.now, verbose_name='Cruise Start Date')),
                ('end_date', models.DateField(default=django.utils.timezone.now, verbose_name='Cruise End Date')),
                ('lead_scientist', models.CharField(default='N/A', help_text='Chief scientist / principal investigator; LASTNAME,FIRSTNAME', max_length=50, verbose_name='Lead Scientist')),
                ('platform', models.CharField(default='N/A', help_text='May be vessel name, fishing boat, wharf, various small vessels, multiple ships. Check that name is spelled correctly. “Unknown” is acceptable for historical data', max_length=50, verbose_name='Platform')),
                ('protocol', models.CharField(default='N/A', help_text='A citation should be given if standard protocols were used during the mission. The use of non-standard protocols should be noted and further details provided in the collector comments field', max_length=50, verbose_name='Protocol')),
                ('collector_comments', models.CharField(blank=True, help_text='Comments from the collector that are pertinent to the entire mission. Generally referring to data collection, analysis, publications, joint missions (more than one institute involved)', max_length=200, null=True, verbose_name='Collector Comments')),
                ('more_comments', models.CharField(blank=True, max_length=200, null=True, verbose_name='More Comments')),
                ('data_manager_comments', models.CharField(blank=True, help_text='Comments from the data manager that are pertinent to the entire mission. Generally referring to data management history (processing steps, edits, special warnings)', max_length=200, null=True, verbose_name='Data Manager Comments')),
                ('biochem_table', models.CharField(blank=True, help_text='How BioChem staging tables will be named without pre or post fixes. If blank, mission descriptor will be used.', max_length=100, null=True, verbose_name='Root BioChem Table Name')),
                ('bottle_directory', models.FilePathField(blank=True, help_text='Location of the .BTL/.ROS fiels to be loaded.', null=True, verbose_name='BTL Directory')),
                ('data_center', models.ForeignKey(default=20, on_delete=django.db.models.deletion.DO_NOTHING, to='bio_tables.bcdatacenter', verbose_name='Data Center')),
                ('geographic_region', models.ForeignKey(blank=True, help_text='Examples: Scotian Shelf, lower St. Lawrence Estuary', max_length=100, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.geographicregion', verbose_name='Geographic Region')),
            ],
        ),
        migrations.CreateModel(
            name='Station',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, verbose_name='Station')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='VariableName',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Field Name')),
            ],
            options={
                'ordering': (django.db.models.functions.text.Lower('name'),),
            },
        ),
        migrations.CreateModel(
            name='VariableField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=255, verbose_name='Field Value')),
                ('action', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='variables', to='core.action', verbose_name='Action')),
                ('name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='variables', to='core.variablename', verbose_name='Field Name')),
            ],
        ),
        migrations.CreateModel(
            name='ValidationError',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.CharField(max_length=255, verbose_name='Message')),
                ('type', models.IntegerField(choices=[(0, 'Unknown'), (1, 'Missing ID'), (2, 'Missing Value'), (3, 'Validation Error')], default=0, verbose_name='Error type')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='validation_errors', to='core.event', verbose_name='Event')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SampleType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_name', models.CharField(help_text='The column name of a sensor or a short name commonly used for the sample', max_length=20, unique=True, verbose_name='Short/Column Name')),
                ('long_name', models.CharField(blank=True, help_text='Short descriptive name for this type of sample/sensor', max_length=126, null=True, verbose_name='Name')),
                ('priority', models.IntegerField(default=1, verbose_name='Priority')),
                ('comments', models.CharField(blank=True, max_length=255, null=True, verbose_name='Comments')),
                ('file_type', models.CharField(help_text='file type extension e.g csv, xls, xlsx, dat', max_length=5, verbose_name='File Type')),
                ('skip', models.IntegerField(default=0, help_text='The row containing headers is often not the first row of a file. This value indicates what row it is normally located on.', verbose_name='Header Row')),
                ('sample_field', models.CharField(help_text='Lowercase name of the column that contains the bottle ids', max_length=50, verbose_name='Sample Column')),
                ('value_field', models.CharField(help_text='Lowercase name of the column that contains the value data', max_length=50, verbose_name='Value Column')),
                ('tab', models.IntegerField(default=0, help_text='The tab number data is located on.For MS Excel, the first tab is zero', verbose_name='Tab')),
                ('flag_field', models.CharField(blank=True, help_text='Lowercase name of the column that contains flags, if it exists', max_length=50, null=True, verbose_name='Flag Column')),
                ('replicate_field', models.CharField(blank=True, help_text='Lowercase name of the column indicating a replicate, if it exists', max_length=50, null=True, verbose_name='Replicate Column')),
                ('comment_field', models.CharField(blank=True, help_text='Lowercase name of the column containing comments, if it exists', max_length=50, null=True, verbose_name='Comment Column')),
                ('allow_blank', models.BooleanField(default=True, help_text='Should values be kept if the sample column is blank?', verbose_name='Allow Blank Samples?')),
                ('allow_replicate', models.BooleanField(default=True, help_text='Can this sample have replicate sample values?', verbose_name='Allow Replicate Samples?')),
                ('datatype', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sample_types', to='bio_tables.bcdatatype', verbose_name='BioChem DataType')),
            ],
            options={
                'unique_together': {('short_name', 'priority')},
            },
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.CharField(blank=True, max_length=50, null=True, verbose_name='File Name')),
                ('bottle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='samples', to='core.bottle', verbose_name='Bottle')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='samples', to='core.sampletype', verbose_name='Type')),
            ],
        ),
        migrations.CreateModel(
            name='MissionSampleType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mission', models.ForeignKey(help_text='Mission a sample type was loaded for', on_delete=django.db.models.deletion.CASCADE, related_name='mission_sample_types', to='core.mission', verbose_name='Mission')),
                ('type', models.ForeignKey(help_text='Sample Type used in a mission', on_delete=django.db.models.deletion.DO_NOTHING, related_name='mission_sample_types', to='core.sampletype', verbose_name='Sample Type')),
            ],
        ),
        migrations.CreateModel(
            name='InstrumentSensor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Attachment Name')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='core.event', verbose_name='Event')),
            ],
        ),
        migrations.CreateModel(
            name='FileError',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.CharField(max_length=255, verbose_name='Message')),
                ('type', models.IntegerField(choices=[(0, 'Unknown'), (1, 'Missing ID'), (2, 'Missing Value'), (3, 'Validation Error')], default=0, verbose_name='Error type')),
                ('file_name', models.CharField(max_length=50, verbose_name='File Name')),
                ('line', models.IntegerField(blank=True, null=True, verbose_name='Line/Object')),
                ('mission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='file_errors', to='core.mission', verbose_name='Mission')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FileConfigurationMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field', models.CharField(help_text='The field DART is expecting', max_length=100, verbose_name='Dart Field')),
                ('mapped_to', models.CharField(help_text='The field Elog has', max_length=100, verbose_name='Elog Field')),
                ('required', models.BooleanField(default=False, help_text='Indicate if this is a required field for validation', verbose_name='Is Required')),
                ('config', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mappings', to='core.fileconfiguration', verbose_name='Configuration File')),
            ],
        ),
        migrations.AddField(
            model_name='event',
            name='instrument',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='core.instrument', verbose_name='Instrument'),
        ),
        migrations.AddField(
            model_name='event',
            name='mission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='core.mission', verbose_name='Mission'),
        ),
        migrations.AddField(
            model_name='event',
            name='station',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='core.station', verbose_name='Station'),
        ),
        migrations.CreateModel(
            name='Error',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.CharField(max_length=255, verbose_name='Message')),
                ('type', models.IntegerField(choices=[(0, 'Unknown'), (1, 'Missing ID'), (2, 'Missing Value'), (3, 'Validation Error')], default=0, verbose_name='Error type')),
                ('mission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='errors', to='core.mission', verbose_name='Mission')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DiscreteSampleValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField(null=True, verbose_name='Value')),
                ('replicate', models.IntegerField(default=1, help_text='Replicates occur when there are multiple samples of the same type form the same bottle.', verbose_name='Replicate #')),
                ('flag', models.IntegerField(blank=True, null=True, verbose_name='Data Quality Flag')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='Sample Comments')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='discrete_value', to='core.sample', verbose_name='Sample')),
                ('sample_datatype', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='bio_tables.bcdatatype', verbose_name='BioChem DataType')),
            ],
        ),
        migrations.AddField(
            model_name='bottle',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bottles', to='core.event', verbose_name='Event'),
        ),
        migrations.CreateModel(
            name='BioChemUpload',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('upload_date', models.DateTimeField(blank=True, help_text='The last time this sensor/sample was uploaded to biochem', null=True, verbose_name='Upload Date')),
                ('modified_date', models.DateTimeField(blank=True, help_text='The last time this sensor/sample was modified', null=True, verbose_name='Upload Date')),
                ('mission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='uploads', to='core.mission', verbose_name='Mission')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='uploads', to='core.sampletype', verbose_name='Type')),
            ],
        ),
        migrations.AddField(
            model_name='action',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actions', to='core.event', verbose_name='Event'),
        ),
        migrations.AlterUniqueTogether(
            name='event',
            unique_together={('event_id', 'mission')},
        ),
        migrations.CreateModel(
            name='ElogConfig',
            fields=[
                ('fileconfiguration_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.fileconfiguration')),
                ('mission', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='elogconfig', to='core.mission', verbose_name='Mission')),
            ],
            bases=('core.fileconfiguration',),
        ),
        migrations.AlterUniqueTogether(
            name='bottle',
            unique_together={('event', 'bottle_number')},
        ),
    ]
