# Generated by Django 4.2 on 2025-05-28 09:36

from django.db import migrations, models
import django.db.models.deletion


def migrate_mesh_gear_to_bottle(apps, schema_editor):
    PlanktonSample = apps.get_model('core', 'PlanktonSample')
    Bottle = apps.get_model('core', 'Bottle')

    update_bottles = []
    for plankton in PlanktonSample.objects.all():
        bottle = plankton.bottle
        bottle.mesh_size = plankton.mesh_size
        bottle.gear_type = plankton.gear_type
        update_bottles.append(bottle)

        if len(update_bottles) > 1000:
            Bottle.objects.bulk_update(update_bottles, ['mesh_size', 'gear_type'])
            update_bottles = []

    if len(update_bottles) > 1000:
        Bottle.objects.bulk_update(update_bottles, ['mesh_size', 'gear_type'])


def migrate_mesh_gear_to_plankton_sample(apps, schema_editor):
    PlanktonSample = apps.get_model('core', 'PlanktonSample')
    Bottle = apps.get_model('core', 'Bottle')

    update_sample = []
    for plankton in PlanktonSample.objects.all():
        bottle = plankton.bottle
        plankton.mesh_size = bottle.mesh_size
        plankton.gear_type = bottle.gear_type
        update_sample.append(plankton)

        if len(update_sample) > 1000:
            PlanktonSample.objects.bulk_update(update_sample, ['mesh_size', 'gear_type'])
            update_sample = []

    if len(update_sample) > 1000:
        PlanktonSample.objects.bulk_update(update_sample, ['mesh_size', 'gear_type'])


class Migration(migrations.Migration):

    dependencies = [
        ('bio_tables', '0001_initial'),
        ('core', '0010_bottle_volume_event_flowmeter_constant_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='bottle',
            name='gear_type',
            field=models.ForeignKey(default=90000002, on_delete=django.db.models.deletion.DO_NOTHING, related_name='bottles', to='bio_tables.bcgear', verbose_name='Gear Type'),
        ),
        migrations.AddField(
            model_name='bottle',
            name='mesh_size',
            field=models.IntegerField(default=0, help_text='Mesh size of the net material in um', verbose_name='Mesh Size'),
        ),
        migrations.RunPython(migrate_mesh_gear_to_bottle, migrate_mesh_gear_to_plankton_sample),
        migrations.RemoveField(
            model_name='planktonsample',
            name='gear_type',
        ),
        migrations.RemoveField(
            model_name='planktonsample',
            name='mesh_size',
        ),
    ]
