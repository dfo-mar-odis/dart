# Generated by Django 4.2 on 2024-01-15 19:26

from django.db import migrations, models, transaction
import django.db.models.deletion
import django.utils.timezone


def write_bulk_create(model, create_list):
    if len(create_list) > 0:
        with transaction.atomic():
            model.objects.bulk_create(create_list)
            return True

    return False


def write_bulk_update(model, update_list, fields):
    if len(update_list) > 0:
        with transaction.atomic():
            model.objects.bulk_update(update_list, fields)
            return True

    return False


def undo_copy_mission_station_instrument(apps, schema_editor):

    Event = apps.get_model('core', 'Event')
    Station = apps.get_model('core', 'Station')
    Instrument = apps.get_model('core', 'Instrument')

    stations = Station.objects.all().order_by('name').distinct()
    create_stations = []

    for station in stations:
        create_stations.append(Station(name=station.name))

    write_bulk_create(Station, create_stations)

    instruments = Instrument.objects.all().order_by('name', 'type').distinct()
    create_instruments = []

    for instrument in instruments:
        create_instruments.append(Instrument(name=instrument.name, type=instrument.type))

    write_bulk_create(Instrument, create_instruments)

    stations = {s.name: s for s in Station.objects.filter(mission__isnull=True)}
    instruments = {f"{i.name}_{i.type}": i for i in Instrument.objects.filter(mission__isnull=True)}
    update_events = []
    fields = ['station', 'instrument']
    for event in Event.objects.all():
        event.station = stations[event.station.name]
        ikey = f"{event.instrument.name}_{event.instrument.type}"
        event.instrument = instruments[ikey]
        update_events.append(event)

        if len(update_events) > 1000:
            write_bulk_update(Event, update_events, fields)
            update_events = []

    write_bulk_update(Event, update_events, fields)

    Station.objects.filter(mission__isnull=False).delete()
    Instrument.objects.filter(mission__isnull=False).delete()


def copy_mission_station_instrument(apps, schema_editor):
    Event = apps.get_model('core', 'Event')
    Station = apps.get_model('core', 'Station')
    Instrument = apps.get_model('core', 'Instrument')

    create_stations = []
    created_stations = []
    for event in Event.objects.all():
        station = event.station

        key = f"{event.mission_id}_{station.name}"
        if key in created_stations:
            continue

        created_stations.append(key)

        n_station = Station(mission=event.mission, name=station.name)
        create_stations.append(n_station)

        if len(create_stations) > 100:
            write_bulk_create(Station, create_stations)
            create_stations = []

    write_bulk_create(Station, create_stations)

    create_instruments = []
    created_instruments = []
    for event in Event.objects.all():
        instrument = event.instrument

        key = f"{event.mission_id}_{instrument.name}_{instrument.type}"
        if key in created_instruments:
            continue

        created_instruments.append(key)

        n_instrument = Instrument(mission=event.mission, name=instrument.name, type=instrument.type)
        create_instruments.append(n_instrument)

        if len(create_stations) > 100:
            write_bulk_create(Instrument, create_instruments)
            create_instruments = []

    write_bulk_create(Instrument, create_instruments)

    stations = {f"{s.mission}_{s.name}": s for s in Station.objects.filter(mission__isnull=False)}
    instruments = {f"{i.mission}_{i.name}_{i.type}": i for i in Instrument.objects.filter(mission__isnull=False)}
    update_events = []
    fields = ['station', 'instrument']
    for event in Event.objects.all():
        skey = f"{event.mission}_{event.station.name}"
        ikey = f"{event.mission}_{event.instrument.name}_{event.instrument.type}"
        event.station = stations[skey]
        event.instrument = instruments[ikey]

        update_events.append(event)
        if len(update_events) > 1000:
            write_bulk_update(Event, update_events, fields)
            update_events = []

    write_bulk_update(Event, update_events, fields)

    Station.objects.filter(mission__isnull=True).delete()
    Instrument.objects.filter(mission__isnull=True).delete()


def undo_copy_mission_variable_name(apps, schema_editor):
    VariableName = apps.get_model('core', 'VariableName')
    VariableField = apps.get_model('core', 'VariableField')

    variables = VariableName.objects.all().values_list('name', flat=True)

    for name in variables:
        var = VariableName.objects.filter(name=name).first()
        fields = [var_field for var_field in VariableField.objects.filter(name__name=name)]
        for field in fields:
            field.name = var

        write_bulk_update(VariableField, fields, ['name'])

        VariableName.objects.filter(name=name).exclude(pk=var.pk).delete()


def copy_mission_variable_name(apps, schema_editor):
    VariableName = apps.get_model('core', 'VariableName')
    VariableField = apps.get_model('core', 'VariableField')

    create_variable_names = {}
    for variable in VariableField.objects.all():
        mission = variable.action.event.mission
        key = f"{mission.pk}_{variable.name.name}"
        if key in create_variable_names.keys():
            continue

        var_name = VariableName(mission=mission, name=variable.name.name)
        create_variable_names[key] = var_name

    write_bulk_create(VariableName, create_variable_names.values())

    variables = {f"{v.mission}_{v.name}": v for v in VariableName.objects.filter(mission__isnull=False)}
    update_variable = []
    fields = ['name']
    for variable in VariableField.objects.all():
        vkey = f"{variable.action.event.mission}_{variable.name.name}"
        variable.name = variables[vkey]
        update_variable.append(variable)

        if len(update_variable) > 1000:
            write_bulk_update(VariableField, update_variable, fields)
            update_variable = []

    write_bulk_update(VariableField, update_variable, fields)

    VariableName.objects.filter(mission__isnull=True).delete()


def copy_event_mission_to_trip(apps, schema_editor):
    Mission = apps.get_model('core', 'Mission')
    Event = apps.get_model('core', 'Event')
    Trip = apps.get_model('core', 'Trip')

    def make_trip(mission):
        trip = Trip()
        trip.mission = mission
        trip.start_date = mission.start_date
        trip.end_date = mission.end_date
        trip.platform = mission.platform
        trip.protocol = mission.protocol
        trip.collector_comments = mission.collector_comments
        trip.more_comments = mission.more_comments
        trip.data_manager_comments = mission.data_manager_comments

        trip.save()
        return trip

    cur_trip = 0
    for mission in Mission.objects.all():
        trip = make_trip(mission)
        update_events = []
        for event in mission.events.all():
            trip_index = int(event.event_id/1000)
            if trip_index > cur_trip:
                trip = make_trip(mission)
                cur_trip = trip_index

            event.event_id = event.event_id - (trip_index*1000)
            event.trip = trip

            update_events.append(event)

        write_bulk_update(Event, update_events, ['trip', 'event_id'])


def copy_event_trip_to_mission(apps, schema_editor):
    Mission = apps.get_model('core', 'Mission')
    Event = apps.get_model('core', 'Event')
    Trip = apps.get_model('core', 'Trip')

    for mission in Mission.objects.all():
        trips = mission.trips.order_by('start_date')
        trip = trips.first()

        mission.start_date = trip.start_date
        mission.end_date = trips.last().end_date
        mission.platform = trip.platform
        mission.protocol = trip.protocol
        mission.collector_comments = trip.collector_comments
        mission.more_comments = trip.more_comments
        mission.data_manager_comments = trip.data_manager_comments

        update_events = []
        for count, trip in enumerate(mission.trips.all()):
            for event in trip.events.all():
                # Trips might have events with conflicting event_ids. A mission would normally never have more
                # than a couple hundred events so we'll take the trip 'index' * 1000 and add it to the event
                # going in reverse this would mean every 1000 on an event_id would mean the trip belongs in a
                # different trip. That's a future me issue, if it's ever an issue at all
                event.event_id = (count*1000) + event.event_id
                event.mission = mission
                update_events.append(event)

            if len(update_events) > 1000:
                write_bulk_update(Event, update_events, ['mission', 'event_id'])
                update_events = []

        write_bulk_update(Event, update_events, ['mission', 'event_id'])


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0003_remove_sampletypeconfig_replicate_field_and_more'),
    ]

    operations = [
        migrations.RenameModel(
            old_name='InstrumentSensor',
            new_name='Attachment',
        ),
        migrations.RenameField(
            model_name='discretesamplevalue',
            old_name='sample_datatype',
            new_name='datatype',
        ),
        migrations.AddField(
            model_name='instrument',
            name='mission',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='instruments', to='core.mission', verbose_name='Mission'),
        ),
        migrations.AddField(
            model_name='station',
            name='mission',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='stations', to='core.mission', verbose_name='Mission'),
        ),
        migrations.RunPython(copy_mission_station_instrument, undo_copy_mission_station_instrument),
        migrations.AddField(
            model_name='variablename',
            name='mission',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='variables', to='core.mission', verbose_name='Mission'),
        ),
        migrations.AlterField(
            model_name='variablename',
            name='name',
            field=models.CharField(max_length=50, verbose_name='Field Name'),
        ),
        migrations.RunPython(copy_mission_variable_name, undo_copy_mission_variable_name),
        migrations.AlterUniqueTogether(
            name='instrument',
            unique_together={('mission', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='station',
            unique_together={('mission', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='variablename',
            unique_together={('mission', 'name')},
        ),
        migrations.AlterField(
            model_name='biochemupload',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='uploads', to='core.missionsampletype', verbose_name='Type'),
        ),
        migrations.AlterField(
            model_name='sample',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='samples', to='core.missionsampletype', verbose_name='Type'),
        ),
        migrations.CreateModel(
            name='Trip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(default=django.utils.timezone.now, verbose_name='Cruise Start Date')),
                ('end_date', models.DateField(default=django.utils.timezone.now, verbose_name='Cruise End Date')),
                ('platform', models.CharField(default='N/A', help_text='May be vessel name, fishing boat, wharf, various small vessels, multiple ships. Check that name is spelled correctly. “Unknown” is acceptable for historical data', max_length=50, verbose_name='Platform')),
                ('protocol', models.CharField(default='N/A', help_text='A citation should be given if standard protocols were used during the mission. The use of non-standard protocols should be noted and further details provided in the collector comments field', max_length=50, verbose_name='Protocol')),
                ('collector_comments', models.CharField(blank=True, help_text='Comments from the collector that are pertinent to the entire mission. Generally referring to data collection, analysis, publications, joint missions (more than one institute involved)', max_length=200, null=True, verbose_name='Collector Comments')),
                ('more_comments', models.CharField(blank=True, max_length=200, null=True, verbose_name='More Comments')),
                ('data_manager_comments', models.CharField(blank=True, help_text='Comments from the data manager that are pertinent to the entire mission. Generally referring to data management history (processing steps, edits, special warnings)', max_length=200, null=True, verbose_name='Data Manager Comments')),
                ('mission', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='trips', to='core.mission', verbose_name='Mission')),
            ],
        ),
        migrations.AddField(
            model_name='event',
            name='trip',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='events', to='core.trip', verbose_name='Trip'),
        ),
        migrations.AlterField(
            model_name='event',
            name='mission',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='events', to='core.mission', verbose_name='Mission'),
        ),
        migrations.AlterUniqueTogether(
            name='event',
            unique_together=set(),
        ),
        migrations.RunPython(copy_event_mission_to_trip, copy_event_trip_to_mission),
        migrations.RemoveField(
            model_name='mission',
            name='collector_comments',
        ),
        migrations.RemoveField(
            model_name='mission',
            name='data_manager_comments',
        ),
        migrations.RemoveField(
            model_name='mission',
            name='end_date',
        ),
        migrations.RemoveField(
            model_name='mission',
            name='more_comments',
        ),
        migrations.RemoveField(
            model_name='mission',
            name='platform',
        ),
        migrations.RemoveField(
            model_name='mission',
            name='protocol',
        ),
        migrations.RemoveField(
            model_name='mission',
            name='start_date',
        ),
        migrations.AlterField(
            model_name='event',
            name='mission',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='events', to='core.mission', verbose_name='Mission'),
        ),
        migrations.AlterField(
            model_name='event',
            name='trip',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='core.trip',
                                    verbose_name='Trip'),
        ),
        migrations.AlterUniqueTogether(
            name='event',
            unique_together={('event_id', 'trip')},
        ),
        migrations.RemoveField(
            model_name='event',
            name='mission',
        ),
        migrations.AlterField(
            model_name='trip',
            name='mission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trips',
                                    to='core.mission', verbose_name='Mission'),
        ),
    ]
